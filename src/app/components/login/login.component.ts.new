import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { MatSnackBar } from '@angular/material/snack-bar';
import { AuthService } from '../../services/auth.service';
import { PasswordValidator } from '../../validators/password.validator';
import { EmailValidator } from '../../validators/email.validator';

interface PasswordStrength {
  score: number;
  feedback: string[];
}

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {
  isLogin = true;
  loading = false;
  loginForm: FormGroup;
  registerForm: FormGroup;
  passwordStrength: PasswordStrength = { score: 0, feedback: [] };
  emailSuggestion: string | null = null;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    private snackBar: MatSnackBar
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, EmailValidator.validate]],
      password: ['', Validators.required]
    });

    this.registerForm = this.fb.group({
      email: ['', [Validators.required, EmailValidator.validate]],
      password: ['', [Validators.required, PasswordValidator.validate]],
      confirmPassword: ['', Validators.required],
      displayName: ['', Validators.required],
      role: ['player', Validators.required]
    }, { validators: PasswordValidator.passwordsMatch });
  }

  ngOnInit(): void {
    // Check if user is already authenticated
    this.authService.user$.subscribe(user => {
      if (user) {
        this.router.navigate(['/home']);
      }
    });

    // Listen to password changes for strength indicator
    this.registerForm.get('password')?.valueChanges.subscribe(password => {
      this.passwordStrength = PasswordValidator.checkStrength(password || '');
    });

    // Listen to email changes for suggestions
    this.registerForm.get('email')?.valueChanges.subscribe(email => {
      this.checkEmailAndSuggest(email);
    });
  }

  toggleMode(): void {
    this.isLogin = !this.isLogin;
    this.loading = false;
  }

  async onLogin(): Promise<void> {
    if (this.loginForm.invalid) {
      return;
    }

    this.loading = true;
    const { email, password } = this.loginForm.value;

    try {
      await this.authService.signIn(email, password);
      this.snackBar.open('Login successful!', 'Close', { duration: 3000 });
      
      // Controlla se c'Ã¨ un URL di redirect salvato
      const redirectUrl = localStorage.getItem('redirectUrl');
      if (redirectUrl) {
        localStorage.removeItem('redirectUrl');
        this.router.navigate([redirectUrl]);
      } else {
        // Redirect normale basato sul ruolo - tutti i giocatori vanno alla home
        this.authService.user$.subscribe(user => {
          if (user) {
            this.router.navigate(['/home']);
          }
        });
      }
    } catch (error: any) {
      console.error('Login error:', error);
      this.snackBar.open(error.message || 'Login failed', 'Close', { duration: 5000 });
    } finally {
      this.loading = false;
    }
  }

  async onRegister(): Promise<void> {
    if (this.registerForm.invalid) {
      // Mark all fields as touched to show validation errors
      this.registerForm.markAllAsTouched();
      return;
    }

    const { email, password, confirmPassword, displayName, role } = this.registerForm.value;

    // Additional check for password confirmation (redundant with validator but good UX)
    if (password !== confirmPassword) {
      this.snackBar.open('Le password non corrispondono', 'Close', { duration: 3000 });
      return;
    }

    // Check password strength
    if (this.passwordStrength.score < 5) {
      this.snackBar.open('La password non soddisfa tutti i requisiti di sicurezza', 'Close', { duration: 5000 });
      return;
    }

    // Final email validation
    if (!this.isValidEmail(email)) {
      this.snackBar.open('Inserisci un indirizzo email valido', 'Close', { duration: 5000 });
      return;
    }

    this.loading = true;

    try {
      await this.authService.register(email, password, displayName, role);
      this.snackBar.open('Registration successful! Please check your email for verification.', 'Close', { duration: 5000 });
      // Redirect to email verification page
      this.router.navigate(['/email-verification']);
    } catch (error: any) {
      console.error('Registration error:', error);
      this.snackBar.open(error.message || 'Registration failed', 'Close', { duration: 5000 });
    } finally {
      this.loading = false;
    }
  }

  async resetPassword(): Promise<void> {
    const email = this.loginForm.get('email')?.value;
    if (!email) {
      this.snackBar.open('Please enter your email address', 'Close', { duration: 3000 });
      return;
    }

    try {
      await this.authService.resetPassword(email);
      this.snackBar.open('Password reset email sent!', 'Close', { duration: 3000 });
    } catch (error: any) {
      console.error('Password reset error:', error);
      this.snackBar.open(error.message || 'Password reset failed', 'Close', { duration: 5000 });
    }
  }

  // Email validation and suggestion methods
  checkEmailAndSuggest(email: string): void {
    if (!email || email.length < 3) {
      this.emailSuggestion = null;
      return;
    }

    const suggestion = this.getSuggestedEmail(email);
    this.emailSuggestion = suggestion !== email ? suggestion : null;
  }

  getSuggestedEmail(email: string): string {
    const commonDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'libero.it', 'alice.it', 'virgilio.it'];
    const parts = email.split('@');
    
    if (parts.length !== 2) return email;
    
    const [username, domain] = parts;
    
    // Check for common typos
    const domainCorrections: { [key: string]: string } = {
      'gmial.com': 'gmail.com',
      'gmai.com': 'gmail.com',
      'gmail.co': 'gmail.com',
      'yahooo.com': 'yahoo.com',
      'yahoo.co': 'yahoo.com',
      'hotmial.com': 'hotmail.com',
      'hotmail.co': 'hotmail.com',
      'outlok.com': 'outlook.com',
      'outlook.co': 'outlook.com'
    };

    if (domainCorrections[domain.toLowerCase()]) {
      return `${username}@${domainCorrections[domain.toLowerCase()]}`;
    }

    return email;
  }

  isValidEmail(email: string): boolean {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(email);
  }

  applySuggestedEmail(): void {
    if (this.emailSuggestion) {
      this.registerForm.get('email')?.setValue(this.emailSuggestion);
      this.emailSuggestion = null;
    }
  }

  getEmailErrorMessage(): string {
    const emailControl = this.isLogin ? this.loginForm.get('email') : this.registerForm.get('email');
    if (emailControl?.hasError('required')) {
      return 'Email is required';
    }
    if (emailControl?.hasError('invalidEmail')) {
      return emailControl.errors?.['invalidEmail']?.message || 'Email non valida';
    }
    return '';
  }

  getPasswordErrorMessage(): string {
    const passwordControl = this.registerForm.get('password');
    if (passwordControl?.hasError('required')) {
      return 'Password is required';
    }
    if (passwordControl?.hasError('invalidPassword')) {
      return 'Password must meet all requirements';
    }
    return '';
  }

  getConfirmPasswordErrorMessage(): string {
    const confirmPasswordControl = this.registerForm.get('confirmPassword');
    if (confirmPasswordControl?.hasError('required')) {
      return 'Please confirm your password';
    }
    if (this.registerForm.hasError('passwordsDoNotMatch')) {
      return 'Passwords do not match';
    }
    return '';
  }

  getDisplayNameErrorMessage(): string {
    const displayNameControl = this.registerForm.get('displayName');
    if (displayNameControl?.hasError('required')) {
      return 'Display name is required';
    }
    return '';
  }
}
